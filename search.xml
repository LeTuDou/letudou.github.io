<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>姬广亮 半小时学会用思维导图记笔记</title>
      <link href="/2020/01/30/ji-guang-liang-ban-xiao-shi-xue-hui-yong-si-wei-dao-tu-ji-bi-ji/"/>
      <url>/2020/01/30/ji-guang-liang-ban-xiao-shi-xue-hui-yong-si-wei-dao-tu-ji-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是思维导图"><a href="#一、什么是思维导图" class="headerlink" title="一、什么是思维导图"></a>一、什么是思维导图</h3><h4 id="思维导图的定义"><a href="#思维导图的定义" class="headerlink" title="思维导图的定义"></a>思维导图的定义</h4><p>​    思维导图就是“思维的地图”。思维导图是基于左右脑运作原理的一种发散性结构的“图文并茂”的思维笔记。它简单却又极其有效，是一种革命性的协助解决问题的思维工具。</p><h4 id="思维导图的作用"><a href="#思维导图的作用" class="headerlink" title="思维导图的作用"></a>思维导图的作用</h4><p>​    过去我们怎么思考问题？都是在头脑里面比较抽象的这种思考过程。当我们想到今天要规划什么事情的时候，都是在脑袋里面的一种抽象化的思维过程，而这种思维的过程是头脑无法捕捉到的具体的这种思维过程。而思维导图，就可以帮助我们把这种抽象的思维过程展现为一副思维的地图，可以让你看得到整个思考的过程。</p><blockquote><p>如果学习是一次作战，那么记忆术就相当于士兵手中先进的作战武器，而思维导图就相当于卓越指挥官军事战略思想与作战方案，二者合二为一，将战无不胜。——思维导图发明人：托尼.博赞</p></blockquote><p><code>记忆术</code>是什么？记忆术就相当于我们大脑内知识的搬运工，那么你有了很多知识装进大脑里面之后，你如何管理这些知识呢？那就需要思维导图这样一个相当于管理员这样一个角色来帮助我们有序的管理这些知识内容。当我们要去解决问题的时候，就可学以致用。</p><blockquote><p>思维导图能将众多的知识与想法连接起来，更有利于进一步的思考、学习与创新。——微软公司创始人：比尔.盖茨</p></blockquote><blockquote><p>思维导图可以让复杂的问题变得非常简单，简单到可以在一张纸上画出来，让你一下看到问题的全部。它的另一个巨大的优势是随着问题的发展，你可以几乎不费吹灰之力地在原有的基础上对问题加以延伸。——英国管理学作家Dr Tony Turrill</p></blockquote><p>​    所以，有时候，我们可以把思维导图称之为思维的模型，我们可以在这样一个思维的模型的基础上加以问题的思考、延伸和创新。</p><h4 id="思维导图具体可以做什么"><a href="#思维导图具体可以做什么" class="headerlink" title="思维导图具体可以做什么"></a>思维导图具体可以做什么</h4><p>我们如果学会了思维导图，我们在学习、工作与生活当中，这样一个工具可以帮助我们做什么?思维导图的用途思维导图可以在演讲时帮助我们表达;在写作时帮助我们拓展写作思路;在学习当中可以提高学习力和记忆的效率;在会议的时候，我们可以通过思维导图来规划高效的会议流程;可以发展我们头脑不同的潜能，创造力、逻辑思维等；还有帮助我们记笔记；帮助我们回忆，用一种图文并茂的学习和思维的方式提高我们整个记忆和理解的效率。尤其在学生群体中，思维导图的用途非常明显，可以实现全脑开发，提高解题的逻辑思维能力以及形象化思维，提高大脑的创造力、想象力。还可把平常线性的笔记升级为思维导图的笔记；形成我们大脑系统化的思维，提高对于问题思考的深度、广度和宽度。最后通过这种知识地图的方式提高知识的理解记忆和表达效率。</p><p>绘制思维导图有两种方式，<code>手绘</code>和通过<code>软件的方式绘制</code>。</p><h3 id="二、思维导图有氧运动——发散思维"><a href="#二、思维导图有氧运动——发散思维" class="headerlink" title="二、思维导图有氧运动——发散思维"></a>二、思维导图有氧运动——发散思维</h3><h4 id="什么是发散思维"><a href="#什么是发散思维" class="headerlink" title="什么是发散思维"></a>什么是发散思维</h4><p>​    发散思维是基于某一个中心主题向多个角度思考的过程。</p><p>​    如当我们提到水果，你的大脑里肯定会想象到很多跟水果有关的信息，比如：香蕉、葡萄、橘子等，这其实就是一个最基本的发散思维的过程。</p><p>​    再如当我们提高学习的时候，可能大脑里马上联想到有语文、数学、英语等学科类的知识。这也是一个最基本的发散思维的过程。</p><p>​    而思维导图其实就是运用了发散思维这样的原理，将信息以图文并茂的方式展现成一副副思维导图笔记。</p><p>​    比如说当我们提高“高兴”的时候，大脑里联想到的有阳光、温暖、巧克力、锻炼、微笑等，那么每一个单独分支上的关键词，又可以向后继续的发散思维。</p><p>​    比如当提到阳光时，可能后面联想到的是假期、夏天等，那么其他的分支也是同样的方式，依次向后延展的时候形成一幅一幅思维导图的作品。</p><p>​    也就是说，思维导图其实本身就是一种发散性的结构。</p><p>​    而呈发散性结构的生命体在我们日常生活中你会发现它们有顽强的生命力，而且很多发散性结构的东西都具备一个非常重要的特点：抓取性。</p><p>​    比如手掌，我们的手掌握成拳头时其实是一个圆，当我们把手掌打开时，它就是一个具备抓取性的发散性的结构。</p><p>​    而思维导图的这种发散性的结构就可以带动大脑的发散思维，帮助我们更好的去探究问题、解决问题、以及找到解决问题的思路。这就是发散性结构，或者是发散性思维在思维导图的创作以及运用当中的重要性。</p><p>​    其实我们的大脑的神经元结构其实就和我们的思维导图的结构是类似的，也是呈这种发散性的树状结构，所以说思维导图的运作原理也是基于左右脑这种运作原理的方式，来帮助我们更好的去思考学习和创新。</p><h4 id="发散思维的作用"><a href="#发散思维的作用" class="headerlink" title="发散思维的作用"></a>发散思维的作用</h4><p>​    通过发散思维，我们可以以点代面来全面性的网罗我们在思考问题的过程当中所需要的答案。</p><p>​    比如以上这个关于水果主题的思维导图的作品。当提高水果的时候，大脑通过发散性思维的方式可能想象到的是橘子、苹果、香蕉、樱桃或菠萝，而每一个信息再通过发散思维的方式，又可以向后拓展出与之相关的内容出来。</p><p>​    比如说当提高橘子时，大脑通过发散思维联想到的是三个不同的信息，那么后面就可以引出三个次级分支出来，然后把对应的关键词填写在分支上。</p><p>​    那么第二条主分支，第三条、第四条、第五条主分支都是相同的道理。可以把整个思考的路径展现成这种形象直观的思维笔记。</p><p>​    而我们过去在思考的过程中可能都是在脑袋里随机排列和归纳，而通过思维导图的话，就可以把整个思考的过程更形象直观的展现成一幅思维的地图，而我们在表达的时候更清晰。</p><p>​    使我们的受众人群在了解或学习的时候，在接收的时候更有效率。这就是发散思维在结合思维导图这种图文并茂的表达方式在提高工作效率或是沟通效率上一个最直观的案例。</p><p>​    思维导图中最重要的核心点：思维导图其实就是发散思维的形象化的排列组合。当我们提到某一个中心词的时候，大脑通过发散思维的方式，通过不同的结构和角度来展现了整个思考的过程。</p><p>​    而每一个分支上的发散思维的过程都形成了另外的一个知识的脉络和庞大的一个知识点，而所有的知识点都综合在一起的话，就形成了非常丰富的一个思维导图的作品。</p><h3 id="三、如何画思维导图"><a href="#三、如何画思维导图" class="headerlink" title="三、如何画思维导图"></a>三、如何画思维导图</h3><h4 id="思维导图的五大组成部分及其绘制规则"><a href="#思维导图的五大组成部分及其绘制规则" class="headerlink" title="思维导图的五大组成部分及其绘制规则"></a>思维导图的五大组成部分及其绘制规则</h4><ol><li><p>中心图</p><ol><li>中心图用来表达整副思维导图的中心思想。就像写作文有个非常重要的题目一样。</li><li>中心图绘制的要求：<ul><li>中心图一样要位于纸张的最中央</li><li>中心图的颜色要在三种或三种以上</li><li>一定能够清晰的表达或涵盖你的中心思想。</li></ul></li></ol></li><li><p>分支</p><p>中心图周围由粗到细的枝干，像大树的树枝一样向外延展出来，思维导图就是靠这些分支的排列和布局来带动大脑的发散思维，把整个思考的路径展现成像GPS导航一样的规划。和中心图相连的第一条分支，把它称为主分支，那么和主分支相连的后边的分支称为次级分支。</p><p>​    要求：由粗到细自然的弯曲，可带动大脑的发散思维，同时缓解视觉疲劳。主分支一样要和中心图相连，后面的次级分支之间也要相连，整个思考的过程要呈和流畅性。</p><p>​    分支不要垂直，因为每一条分支上只写一个关键词，而分支最主要的一个作用就是托住关键词。分支的颜色尽量要有跳跃性，分支颜色尽量不重复，如果是单色的思维导图，大脑在阅读和体验的时候压力比较大。</p><p>​    主分支颜色和次分支颜色要统一，如第一条主分支颜色是黄色的，它后面的次级分支颜色也要是黄色的，通过颜色把信息归类。</p></li><li><p>关键词</p><p>​    每一条分支上都有一个词语，统称为“关键词”，颜色国际上统一使用黑色，在提取和了解内容的时候黑色关键词比较凸显，因为分支一般是彩色的，上面的黑色的关键词就很容易跳入我们的大脑，更容易聚焦我们的观察，更容易集中我们的注意力。</p><p>​    关键词一定要写在分支上。其目的是为了当我们根据分支的路径来阅读这幅思维导图的时候，可以快速的浏览，或者锁定每一条分支上的中心思想，也可快速的被我们的视觉扫描到，每一个关键词之间的关系也可以通过并列或者是发散的结构把它清晰的梳理到大脑里。所以，关键词要写在分支上，而且由内向外关键词依次缩小，即靠近中心图的关键词尽量大一些，而向外的分支上的关键词相对小一些。尽量具有这种发散性的由大变小的结构就可以了。</p></li><li><p>关键图</p><p>​    除了中心图之外，外围的这些图像统称为关键图，其目的是为了帮助我们大脑更好的提高活跃度，缓解视觉疲劳，提高记忆的效率，小于中心图的大小。</p></li><li><p>颜色</p><p>​    在整个思维导图创作的过程中，颜色是始终存在的，它可以帮助我们缓解学习和思考的疲劳度，在阅读过程中更有效率，头脑更容易集中注意力。</p><h5 id="注意-纸张最好横向摆放，目的是可以拉大左右的视觉宽度，让我们整个思考和学习的过程更加放松，大脑更容易聚焦思考的问题的中心思想。"><a href="#注意-纸张最好横向摆放，目的是可以拉大左右的视觉宽度，让我们整个思考和学习的过程更加放松，大脑更容易聚焦思考的问题的中心思想。" class="headerlink" title="注意:纸张最好横向摆放，目的是可以拉大左右的视觉宽度，让我们整个思考和学习的过程更加放松，大脑更容易聚焦思考的问题的中心思想。"></a>注意:<strong>纸张最好横向摆放，目的是可以拉大左右的视觉宽度，让我们整个思考和学习的过程更加放松，大脑更容易聚焦思考的问题的中心思想。</strong></h5></li></ol><h4 id="画思维导图前的准备工作-手绘"><a href="#画思维导图前的准备工作-手绘" class="headerlink" title="画思维导图前的准备工作(手绘)"></a>画思维导图前的准备工作(手绘)</h4><ol><li><p>工具篇：画思维导图前要准备哪些工具？</p><ol><li>A4白纸</li><li>草稿纸（可用于发散思维）</li><li>笔（12色彩笔）</li><li>清晰的大脑（聚焦目标）</li></ol></li><li><p>思维篇：绘制思维导图的“三千万”</p><ol><li>千万不要把思维导图当做绘画课，它只是一种图文表达的一种思维训练的工具。</li><li>千万不要把所有的图文笔记都当做思维导图。</li><li>千万不要为了画思维导图而画，创作思维导图都是基于要解决一个问题。</li></ol><h5 id="注-只有真正解决问题的思维导图，才是一个标准的真正有实用性的思维导图。"><a href="#注-只有真正解决问题的思维导图，才是一个标准的真正有实用性的思维导图。" class="headerlink" title="注:只有真正解决问题的思维导图，才是一个标准的真正有实用性的思维导图。"></a>注:<strong>只有真正解决问题的思维导图，才是一个标准的真正有实用性的思维导图。</strong></h5></li></ol><h4 id="画思维导图的步骤"><a href="#画思维导图的步骤" class="headerlink" title="画思维导图的步骤"></a>画思维导图的步骤</h4><p>​    画思维导图就像植物成长的过程！</p><p>​    第一步：纸张横向摆放，根据中心主题确定中心图。</p><p>​    第二步：发散思维确定主分支数量，并引出第一条主分支。发散思维可以帮助我们思考的路径或方向，而头脑也是通过发散思维的方式来确定分支的数量，引出第一条主分支的时候一般是从一点钟方向，然后顺时针进行排列，基于主分支上的关键词，再继续发散的时候，后面的次级分支就可以延展出来了。</p><p>​    第三步：分支顺时针进行布局。注意：当分支布局到左侧时，因由下而上布局。绘制过程中，尽量使用关键图，达到图文并茂的效果。只有图文并茂的思维导图才能更好集中大脑的注意力。</p><h3 id="四、如何用思维导图记笔记"><a href="#四、如何用思维导图记笔记" class="headerlink" title="四、如何用思维导图记笔记"></a>四、如何用思维导图记笔记</h3><h4 id="传统线性笔记＆思维导图笔记"><a href="#传统线性笔记＆思维导图笔记" class="headerlink" title="传统线性笔记＆思维导图笔记"></a>传统线性笔记＆思维导图笔记</h4><p>​    传统笔记是文字性的，密密麻麻，对大脑来说压力比较大，而且枯燥无聊，不聚焦。而思维导图笔记，就更加形象直观，知识点比较突出。关键词比较明显，在阅读和理解过程中路径比较清晰。比较：用思维导图记笔记：记忆更牢固，知识结构更清晰，学习更有效率。</p><h4 id="用思维导图记笔记的步骤"><a href="#用思维导图记笔记的步骤" class="headerlink" title="用思维导图记笔记的步骤"></a>用思维导图记笔记的步骤</h4><p>​    第一步：聚焦中心思想，确定中心主题及中心图</p><p>​    第二步：总览知识结构，确定主分支数量（盖房子）</p><p>​    第三步：根据每条主分支上的“关键词”，继续发散思维，提取了关键词之后，布局到分支上。</p><p>​    第四步：合理布局，并尽量使用关键图</p><p><strong>后记：因为太多时候，不是我们不努力，而是我们没有找到努力的正确方法和方向。所以最近一段时间在学习思维导图与时间管理。不仅要学到还要实践到，最后评估总结，才能把这项技能变成自己的。所以，看了，听了，要行动起来才是最重要的。朋友们，一起加油！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker简单使用</title>
      <link href="/2019/09/16/docker-jian-dan-shi-yong/"/>
      <url>/2019/09/16/docker-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="Docker关键词"><a href="#Docker关键词" class="headerlink" title="Docker关键词"></a>Docker关键词</h3><ul><li>镜像</li><li>容器</li><li>客户端</li><li>主机</li><li>仓库</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown基础语法</title>
      <link href="/2019/09/15/markdown-ji-chu-yu-fa/"/>
      <url>/2019/09/15/markdown-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="md语法学习"><a href="#md语法学习" class="headerlink" title="md语法学习"></a>md语法学习</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>1.前面带#号，后面带文字，分别表示h1-h6,只到h6，而且h1下面会有一条横线</p><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><p>2.相当于闭合标签</p><pre><code># 一级标题 ### 二级标题 ##### 三级标题 ####### 四级标题 ######### 五级标题 ########### 六级标题 #####</code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>1.无序列表</p><pre><code>//形式一+ a+ b+ c  //形式二- a- b- c//形式三* a* b* c</code></pre><p>2.有序列表</p><pre><code>//正常形式1. 12. 23. 3//错乱形式2. aa4. vv5. bb</code></pre><p>3.嵌套列表</p><pre><code>+ a  1. a1  2. a2  3. a3+ b  2. b2  3. b3  4. b4* c  1. c1  2. c2  3. c3- d  1. d1  2. d2  4. d41. A  + A1  * A2  - A3  1. A    + A1    * A2    - A3  2. A    + A1    * A2    - A3</code></pre><h2 id="引用说明区块"><a href="#引用说明区块" class="headerlink" title="引用说明区块"></a>引用说明区块</h2><p>1.正常形式</p><pre><code>&gt; 引用内容、说明内容。在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格，引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等。</code></pre><p>2.嵌套区块</p><pre><code>&gt; 一级引用&gt;&gt; 二级引用&gt;&gt;&gt; 三级引用&gt;&gt;&gt;&gt; 四级引用&gt;&gt;&gt;&gt;&gt; 五级引用&gt;&gt;&gt;&gt;&gt;&gt; 六级引用</code></pre><blockquote><p>一级引用</p></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>1.少量代码<br><code>public static void main(String[] args){}</code><br>2.大量代码</p><pre><code>public static void main(String[] args){  System.out.pringln(&quot;你好，世界&quot;);}</code></pre><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>1.行内式<br>链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来</p><pre><code>[简书](https://www.jianshu.com ),</code></pre><p><a href="https://www.jianshu.com" target="_blank" rel="noopener">简书</a>,<br>是一个创作社区,任何人均可以在其上进行创作。用户在简书上面可以方便的创作自己的作品,互相交流。</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>1.行内式<br>和链接的形式差不多，图片的名字放在[]中，图片地址放在随后的()中，title属性（图片地址后面空一格，然后用引号引起来）,注意的是[]前要加上!</p><pre><code>![猴子](https://raw.githubusercontent.com/LeTuDou/images/master/20190811000823.jpg)</code></pre><p><img src="/images/yt.jpg" alt="本地"><br><img src="https://raw.githubusercontent.com/LeTuDou/images/master/20190811000823.jpg" alt="远程"></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><pre><code>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以---- - -------**** * *******____ _ _______</code></pre><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code>1.强调字体一个星号或者是一个下划线包起来，会转换为&lt;em&gt;倾斜，如果是2个，会转换为&lt;strong&gt;加粗*md*    **md**_md_    __md__</code></pre><p><em>md</em>  </p><pre><code>2.基本上和js转义一样,\加需要转义的字符\\\*\+\-\`\_</code></pre><p>1+2=3</p><pre><code>3.删除线用~~把需要显示删除线的字符包裹起来~~删除线~~</code></pre><p>什么是删除线?这就是<del>删除线</del>!原来是这样的</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre><code>|123|234|345||:-|:-:|-:||abc|bcd|cde||abc|bcd|cde||abc|bcd|cde||123|234|345||:---|:---:|---:||abc|bcd|cde||abc|bcd|cde||abc|bcd|cde|123|234|345:-|:-:|-:abc|bcd|cdeabc|bcd|cdeabc|bcd|cde上面三个例子的效果一样，由此可得：1. 表格的格式不一定要对的非常起，但是为了良好的变成风格，尽量对齐是最好的2. 分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中</code></pre><table><thead><tr><th align="left">123</th><th align="center">234</th><th align="right">345</th></tr></thead><tbody><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web性能测试工具使用</title>
      <link href="/2019/09/07/web-xing-neng-ce-shi-gong-ju-shi-yong/"/>
      <url>/2019/09/07/web-xing-neng-ce-shi-gong-ju-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="apache-bench"><a href="#apache-bench" class="headerlink" title="apache bench"></a>apache bench</h3><blockquote><p>主要是用来测试apache的</p></blockquote><p>使用说明:</p><pre class=" language-sh"><code class="language-sh">ab -c 100 -n 1000 http://www.baidu.com/-c 表示并发用户数-n 表示请求总数</code></pre><p>测试结果:</p><pre class=" language-sh"><code class="language-sh">D:\httpd-2.4.41-o102s-x86-vc14-r2\Apache24\bin>ab -c 100 -n 1000 http://www.baidu.com/This is ApacheBench, Version 2.3 <$Revision: 1843412 $>Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking www.baidu.com (be patient)Completed 100 requestsCompleted 200 requestsCompleted 300 requestsCompleted 400 requestsCompleted 500 requestsCompleted 600 requestsCompleted 700 requestsCompleted 800 requestsCompleted 900 requestsCompleted 1000 requestsFinished 1000 requestsServer Software:        BWS/1.1       #服务器软件版本Server Hostname:        www.baidu.com #请求的URLServer Port:            80              #请求的端口号Document Path:          /              #请求的服务器的路径Document Length:        153928 bytes    #页面长度   单位是字节Concurrency Level:      100                #并发请求量Time taken for tests:   62.017 seconds    #整个测试持续时间Complete requests:      1000            #完成的请求数Failed requests:        999                #失败的请求数   (Connect: 0, Receive: 0, Length: 999, Exceptions: 0)Total transferred:      154804172 bytes    #整个场景中网络传输量HTML transferred:       153843884 bytes #整个场景中的HTML内容传输量Requests per second:    16.12 [#/sec] (mean) #吞吐速率 *Time per request:       6201.745 [ms] (mean)  #用户平均请求等待时间 *Time per request:       62.017 [ms] (mean, across all concurrent requests) #服务器平均请求处理的时间 *Transfer rate:          2437.64 [Kbytes/sec] received  #平均每秒网络上的流量，可以帮助排除是否有存在网络流量过大导致响应时间延长的问题Connection Times (ms)              min  mean[+/-sd] median   maxConnect:        8   62 820.5     15   15012Processing:    60 6023 8850.5   1599   32965Waiting:       12 2411 4824.5    771   16939Total:         72 6084 8893.9   1616   32983Percentage of the requests served within a certain time (ms)  50%   1616    #50%的用户的请求1616ms内返回  66%   1787  75%   2160  80%  16625  90%  17062  95%  31604  98%  32038  99%  32119 100%  32983 (longest request)</code></pre><p>参数详解:</p><pre class=" language-sh"><code class="language-sh">格式：ab [options] [http://]hostname[:port]/path参数说明：-n requests Number of requests to perform//在测试会话中所执行的请求个数（本次测试总共要访问页面的次数）。默认时，仅执行一个请求。-c concurrency Number of multiple requests to make//一次产生的请求个数（并发数）。默认是一次一个。-t timelimit Seconds to max. wait for responses//测试所进行的最大秒数。其内部隐含值是-n 50000。它可以使对服务器的测试限制在一个固定的总时间以内。默认时，没有时间限制。-p postfile File containing data to POST//包含了需要POST的数据的文件，文件格式如“p1=1&p2=2”.使用方法是 -p 111.txt 。 （配合-T）-T content-type Content-type header for POSTing//POST数据所使用的Content-type头信息，如 -T “application/x-www-form-urlencoded” 。 （配合-p）-v verbosity How much troubleshooting info to print//设置显示信息的详细程度 – 4或更大值会显示头信息， 3或更大值可以显示响应代码(404, 200等), 2或更大值可以显示警告和其他信息。 -V 显示版本号并退出。-w Print out results in HTML tables//以HTML表的格式输出结果。默认时，它是白色背景的两列宽度的一张表。-i Use HEAD instead of GET// 执行HEAD请求，而不是GET。-x attributes String to insert as table attributes //用来设置输出结果的表格的table属性-y attributes String to insert as tr attributes //用来设置输出结果的表格的tr属性-z attributes String to insert as td or th attributes //用来设置输出结果的表格的th属性-C attribute Add cookie, eg. -C “c1=1234,c2=2,c3=3″ (repeatable)//-C cookie-name=value 对请求附加一个Cookie:行。 其典型形式是name=value的一个参数对。此参数可以重复，用逗号分割。提示：可以借助session实现原理传递 JSESSIONID参数， 实现保持会话的功能，如-C ” c1=1234,c2=2,c3=3, JSESSIONID=FF056CD16DA9D71CB131C1D56F0319F8″ 。-H attribute Add Arbitrary header line, eg. ‘Accept-Encoding: gzip’ Inserted after all normal header lines. (repeatable)-A attribute Add Basic WWW Authentication, the attributesare a colon separated username and password.-P attribute Add Basic Proxy Authentication, the attributesare a colon separated username and password.//-P proxy-auth-username:password 对一个中转代理提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即, 是否发送了401认证需求代码)，此字符串都会被发送。-X proxy:port Proxyserver and port number to use-V Print version number and exit //打印版本号，然后退出-k Use HTTP KeepAlive feature //使用http keepAlive 特性-d Do not show percentiles served table.-S Do not show confidence estimators and warnings.-g filename Output collected data to gnuplot format file.-e filename Output CSV file with percentages served-h Display usage information (this message)//-attributes 设置属性的字符串. 缺陷程序中有各种静态声明的固定长度的缓冲区。另外，对命令行参数、服务器的响应头和其他外部输入的解析也很简单，这可能会有不良后果。它没有完整地实现 HTTP/1.x; 仅接受某些’预想’的响应格式。 strstr(3)的频繁使用可能会带来性能问题，即你可能是在测试ab而不是服务器的性能。</code></pre><h3 id="http-load"><a href="#http-load" class="headerlink" title="http_load"></a>http_load</h3><blockquote><p>http_load以并行复用的方式运行，用以测试web服务器的吞吐量与负载。<br>但是它不同于大多数压力测试工具，它可以以一个单一的进程运行，一般不会把客户机搞死。<br>还可以测试HTTPS类的网站请求。</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>下载</p><pre class=" language-sh"><code class="language-sh">[root@localhost http_load-09Mar2016]# wget http://www.acme.com/software/http_load/http_load-09Mar2016.tar.gz</code></pre></li><li><p>编译</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# cd http_load-09Mar2016[root@localhost http_load-09Mar2016]# make</code></pre></li><li><p>测试运行</p><pre class=" language-sh"><code class="language-sh">[root@localhost http_load-09Mar2016]# vim urls.txthttp://www.baidu.com/http://192.168.127.131:8080/[root@localhost http_load-09Mar2016]# ./http_load -rate 5 -seconds 10 urls.txt</code></pre></li></ol><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li><p>新建一个urls.txt 用来存储目标url(每一个url独占一行)</p></li><li><p>使用命令</p><pre class=" language-sh"><code class="language-sh">[root@localhost http_load-09Mar2016]# http_load -parallel 5 -seconds 10 urls.txt </code></pre></li><li><p>参数解析</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>-parallel 简写-p</td><td>含义是并发的用户进程数</td></tr><tr><td>-fetches 简写-f</td><td>含义是总计的访问次数</td></tr><tr><td>-rate 简写-r</td><td>含义是每秒的访问频率</td></tr><tr><td>-seconds简写-s</td><td>含义是总计的访问时间</td></tr></tbody></table></li><li><p>举例说明</p><pre class=" language-sh"><code class="language-sh">[root@localhost http_load-09Mar2016]# http_load -r 5 -s 10 urls.txt 49 fetches, 1 max parallel, 7.5419e+06 bytes, in 10.0004 seconds#在上面的测试中运行了49个请求，最大的并发进程数是1，总计传输的数据是7.5419e+06bytes，运行的时间是10.0004秒153916 mean bytes/connection #说明每一连接平均传输的数据量4.89981 fetches/sec, 754162 bytes/sec #每秒的响应请求为4.89981，每秒传递的数据为754162bytes/secmsecs/connect: 25.5803 mean, 57.465 max, 19.389 min#每连接的平均响应时间是25.5803 msecs,最大的响应时间57.465 msecs,最小的响应时间19.389 msecsmsecs/first-response: 27.0916 mean, 46.482 max, 21.079 min#第一次平均响应时间是 27.0916 msecs,最大的响应时间46.482 msecs,最小的响应时间 21.079 msecs47 bad byte countsHTTP response codes:          code 200 -- 49#打开响应页面的类型</code></pre></li></ol><h3 id="webbench"><a href="#webbench" class="headerlink" title="webbench"></a>webbench</h3><blockquote><p>webbench是Linux下的一个网站压力测试工具，最多可以模拟3万个并发连接去测试网站的负载能力</p></blockquote><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>1.下载</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# wget http://soft.vpser.net/test/webbench/webbench-1.5.tar.gz</code></pre><p>2.解压</p><pre class=" language-sh"><code class="language-sh">[root@localhost webbench-1.5]# tar -zxvf webbench-1.5.tar.gz </code></pre><p>3.安装ctags，编译</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# yum install ctags -y[root@localhost src]# cd webbench-1.5[root@localhost webbench-1.5]# make</code></pre><p>4.测试</p><pre class=" language-sh"><code class="language-sh">[root@localhost webbench-1.5]# webbench -c 1 -t 5 http://192.168.127.131:8080/</code></pre><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><pre class=" language-sh"><code class="language-sh">用法：webbench -c 并发数 -t 运行测试时间 URL[root@localhost webbench-1.5]# webbench -c 1 -t 5 http://192.168.127.131:8080/Webbench - Simple Web Benchmark 1.5Copyright (c) Radim Kolar 1997-2004, GPL Open Source Software.Benchmarking: GET http://192.168.127.131:8080/1 client, running 5 sec.Speed=322032 pages/min, 60625932 bytes/sec.Requests: 26836 susceed, 0 failed.</code></pre><h3 id="Siege"><a href="#Siege" class="headerlink" title="Siege"></a>Siege</h3><ul><li><p>安装</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# wget http://download.joedog.org/siege/siege-latest.tar.gz[root@localhost src]# tar -zxvf siege-latest.tar.gz [root@localhost src]# cd siege-4.0.4/[root@localhost siege-4.0.4]# ./configure [root@localhost siege-4.0.4]# make[root@localhost siege-4.0.4]# make install[root@localhost siege-4.0.4]# vim url.txthttp://www.baidu.com/[root@localhost siege-4.0.4]# siege -c 1 -r 1 -f url.txt</code></pre></li><li><p>使用</p><pre class=" language-sh"><code class="language-sh">[root@localhost siege-4.0.4]# siege -c 1 -r 1 -f url.txt** SIEGE 4.0.4** Preparing 1 concurrent users for battle.The server is now under siege...HTTP/1.1 200     0.10 secs:   39179 bytes ==> GET  /HTTP/1.1 200     0.07 secs:    1131 bytes ==> GET  /baidu.html?from=noscriptHTTP/1.1 200     0.06 secs:      91 bytes ==> GET  /img/gs.gifHTTP/1.1 200     0.12 secs:    3757 bytes ==> GET  /5eN1bjq8AAUYm2zgoY3K/r/www/cache/bdorz/baidu.min.cssHTTP/1.1 200     0.53 secs:   33167 bytes ==> GET  /r/www/cache/static/jquery/jquery-1.10.2.min_65682a2.jsHTTP/1.1 200     0.07 secs:    6511 bytes ==> GET  /img/baidu_resultlogo@2.pngHTTP/1.1 200     0.07 secs:     705 bytes ==> GET  /img/baidu_jgylogo3.gifHTTP/1.1 200     0.06 secs:    7877 bytes ==> GET  /img/bd_logo1.pngTransactions:                   8 hits 完成8次处理Availability:              100.00 %    100.00 % 成功率Elapsed time:                1.08 secs 总共用时Data transferred:            0.09 MB   共数据传输0.09 MBResponse time:                0.13 secs 显示网络连接的速度Transaction rate:            7.41 trans/sec 平均每秒完成 17.56 次处理Throughput:                0.08 MB/sec  平均每秒传送数据Concurrency:                1.00     实际最高并发数Successful transactions:           8 成功处理次数Failed transactions:               0 失败处理次数Longest transaction:            0.53 每次传输所花最长时间Shortest transaction:            0.06 每次传输所花最短时间</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> WebTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux开发环境部署</title>
      <link href="/2019/09/07/linux-kai-fa-huan-jing-bu-shu/"/>
      <url>/2019/09/07/linux-kai-fa-huan-jing-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux开发环境部署"><a href="#Linux开发环境部署" class="headerlink" title="Linux开发环境部署"></a>Linux开发环境部署</h2><h3 id="Java环境部署"><a href="#Java环境部署" class="headerlink" title="Java环境部署"></a>Java环境部署</h3><ol><li><p>下载对应tar.gz</p></li><li><p>上传服务器</p></li><li><p>服务器配置</p><pre class=" language-sh"><code class="language-sh">1.解压[root@localhost Java]# tar -zxvf jdk-8u211-linux-x64.tar.gz2.解压完毕需要配置，编辑profile文件：[root@localhost Java]# vim /etc/profile3.进去以后，在最后添加如下内容，配置环境变量：#Java开发者环境JAVA_HOME=/root/Java/jdk1.8.0_211JRE_HOME=$JAVA_HOME/jreCLASS_PATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:PATH=.:$JAVA_HOME/bin:$PATHexport  PATH JAVA_HOME JRE_HOME  CLASS_PATH4.修改保存后让它生效[root@localhost jdk1.8.0_211]# source /etc/profile5.检验java或者javac命令[root@localhost jdk1.8.0_211]# java -versionjava version "1.8.0_211"Java(TM) SE Runtime Environment (build 1.8.0_211-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)</code></pre></li></ol><h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><p>1.安装编译工具及库文件</p><pre class=" language-sh"><code class="language-sh">[root@localhost jdk1.8.0_211]# yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</code></pre><p>2.安装PCRE</p><blockquote><p>PCRE 作用是让 Nginx 支持 Rewrite 功能</p></blockquote><ol><li><p>下载安装包</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# cd /usr/local/src/[root@localhost src]# wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</code></pre></li></ol><ol start="2"><li><p>解压安装包</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# tar -zxvf pcre-8.35.tar.gz</code></pre></li><li><p>进入安装包目录</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# cd pcre-8.35</code></pre></li><li><p>编译安装</p><pre class=" language-sh"><code class="language-sh">[root@localhost pcre-8.35]# ./configure[root@localhost pcre-8.35]# make && make install</code></pre></li><li><p>查看版本</p><pre class=" language-sh"><code class="language-sh">[root@localhost pcre-8.35]# pcre-config --version8.35</code></pre></li></ol><p>3.安装Nginx</p><ol><li><p>下载Nginx</p><pre class=" language-sh"><code class="language-sh">[root@localhost pcre-8.35]# cd /usr/local/src[root@localhost src]# wget http://nginx.org/download/nginx-1.6.2.tar.gz</code></pre></li><li><p>解压安装包</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# tar zxvf nginx-1.6.2.tar.gz </code></pre></li><li><p>进入安装包目录</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# cd nginx-1.6.2</code></pre></li><li><p>编译安装</p><pre class=" language-sh"><code class="language-sh">  [root@localhost nginx-1.6.2]# ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35  nginx path prefix: "/usr/local/webserver/nginx"  nginx binary file: "/usr/local/webserver/nginx/sbin/nginx"  nginx configuration prefix: "/usr/local/webserver/nginx/conf"  nginx configuration file: "/usr/local/webserver/nginx/conf/nginx.conf"  nginx pid file: "/usr/local/webserver/nginx/logs/nginx.pid"  nginx error log file: "/usr/local/webserver/nginx/logs/error.log"  nginx http access log file: "/usr/local/webserver/nginx/logs/access.log"  nginx http client request body temporary files: "client_body_temp"  nginx http proxy temporary files: "proxy_temp"  nginx http fastcgi temporary files: "fastcgi_temp"  nginx http uwsgi temporary files: "uwsgi_temp"  nginx http scgi temporary files: "scgi_temp"  [root@localhost nginx-1.6.2]# make && make install</code></pre></li><li><p>测试版本</p><pre class=" language-sh"><code class="language-sh">[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -vnginx version: nginx/1.6.2</code></pre></li><li><p>命令提示</p><pre class=" language-sh"><code class="language-sh">1.检查配置文件nginx.conf的正确性[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -tnginx: the configuration file /usr/local/webserver/nginx/conf/nginx.conf syntax is oknginx: configuration file /usr/local/webserver/nginx/conf/nginx.conf test is successful2.启动Nginx[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx3.重新载入配置文件[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -s reload 4.重启 Nginx[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -s reopen 5.停止 Nginx[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -s stop</code></pre></li></ol><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><ol><li><p>查看Linux系统版本和内核版本</p><pre class=" language-sh"><code class="language-sh">查看操作系统版本[root@localhost ~]# cat /etc/redhat-releaseCentOS Linux release 7.4.1708 (Core) 查看内核版本[root@localhost ~]#  uname -r 3.10.0-693.el7.x86_64</code></pre></li><li><p>卸载历史版本( 使用命令rpm -e –nodeps {-file-name}进行移除操作，移除的时候可能会有依赖，要注意一定的顺序。)我这里暂无</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# rpm -qa | grep mysql</code></pre></li><li><p>使用rpm命令安装MySQL组件(使用命令rpm -ivh {-file-name}进行安装操作)</p><blockquote><p>按照依赖关系依次安装rpm包 依赖关系依次为common→libs→client→server</p></blockquote><pre><code>[root@localhost ~]# rpm -ivh mysql-community-common-5.7.27-1.el7.x86_64.rpm[root@localhost ~]# rpm -ivh mysql-community-libs-5.7.27-1.el7.x86_64.rpm[root@localhost ~]# rpm -ivh mysql-community-client-5.7.27-1.el7.x86_64.rpm[root@localhost ~]# rpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm  --force --nodeps</code></pre><p>[^注]: <strong>ivh中， i-install安装；v-verbose进度条；h-hash哈希校验</strong>`</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# rpm -ivh mysql-community-libs-5.7.27-1.el7.x86_64.rpm警告：mysql-community-libs-5.7.27-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY错误：依赖检测失败：    mysql-community-common(x86-64) >= 5.7.9 被 mysql-community-libs-5.7.27-1.el7.x86_64 需要    mariadb-libs 被 mysql-community-libs-5.7.27-1.el7.x86_64 取代解决方案:清除yum里所有mariadb依赖包[root@localhost ~]# rpm -qa | grep mariadbmariadb-libs-5.5.56-2.el7.x86_64[root@localhost ~]# rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64[root@localhost ~]# rpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm警告：mysql-community-server-5.7.27-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY错误：依赖检测失败：    net-tools 被 mysql-community-server-5.7.27-1.el7.x86_64 需要原因：这是由于yum安装了旧版本的GPG keys造成的解决方案:[root@localhost ~]# rpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm  --force --nodeps</code></pre></li><li><p>注意细节</p><ol><li>执行 yum remove mysql-libs   命令后，会自动删除掉 /etc/ 下的 my.cnf 文件</li><li>对于安装mysql组件，只有安装了 mysql-community-server-5.7.22-1.el7.x86_64.rpm 组件，才会:<ul><li>在 /etc/下生成 my.cnf 文件 和 my.cnf.d 文件夹</li><li>在/var/lib/下生产以下三个文件夹</li><li>在/var/log/ 下生成 mysqld.log 文件</li><li>在/var/run/ 下生成 mysqld 目录</li></ul></li></ol></li></ol><h3 id="MySQL配置"><a href="#MySQL配置" class="headerlink" title="MySQL配置"></a>MySQL配置</h3><ol><li><p>启动mysql</p><blockquote><p>安装完后，使用命令 <strong>service mysqld start</strong> 或 <strong>systemctl start mysqld.service</strong> 启动MySQL服务。（如果mysql服务无法启动，就重启一下系统）</p></blockquote><pre class=" language-sh"><code class="language-sh">启动mysql[root@localhost ~]# systemctl start mysqld.service 查看mysql状态[root@localhost ~]# systemctl status mysqld.service关闭mysql[root@localhost ~]# systemctl stop mysqld.service</code></pre><p>补充说明</p><pre><code>查看mysql进程[root@localhost ~]# ps -ef|grep mysql查看3306端口[root@localhost ~]# netstat -anop|grep 3306Linux使用netstat或者ifconfig命令时，显示命令未找到。[root@localhost ~]# netstat -anop|grep 3306-bash: netstat: 未找到命令[root@localhost ~]# yum search netstat已加载插件：fastestmirrorLoading mirror speeds from cached hostfile * base: mirror.jdcloud.com * extras: mirror.bit.edu.cn * updates: mirror.jdcloud.com============== 匹配：netstat =================dstat.noarch : Versatile resource statistics toolnet-snmp.x86_64 : A collection of SNMP protocol tools and librariesnet-tools.x86_64 : Basic networking tools[root@localhost ~]# yum install net-tools -y</code></pre></li></ol><p>   2.登录MySQL修改root密码</p><ol><li><p>查看临时密码:</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# grep 'temporary password' /var/log/mysqld.log2019-09-05T03:42:23.844021Z 1 [Note] A temporary password is generated for root@localhost: nUdCNyay/8B#</code></pre><p>nUdCNyay/8B# 就是登陆密码</p></li><li><p>使用临时密码登陆,修改root密码</p><pre class=" language-sh"><code class="language-sh">mysql> ALTER USER root@localhost IDENTIFIED  BY '123123';ERROR 1819 (HY000): Your password does not satisfy the current policy requirements解决方案:1.更改策略，设置 validate_password_policy=0;mysql> set global validate_password_policy=0;Query OK, 0 rows affected (0.00 sec)2.重设密码mysql> set password for root@localhost=password('ab123123');Query OK, 0 rows affected, 1 warning (0.31 sec)3.授予远程访问权限mysql>  grant all privileges on *.* to 'root' @'%' identified by 'ab123123';Query OK, 0 rows affected, 1 warning (0.00 sec)4.刷新权限mysql> flush privileges;Query OK, 0 rows affected (0.00 sec)</code></pre></li><li><p>查看当前数据库密码策略</p><pre class=" language-sh"><code class="language-sh">mysql> show VARIABLES like "%password%";+---------------------------------------+-------+| Variable_name                         | Value |+---------------------------------------+-------+| default_password_lifetime             | 0     || disconnect_on_expired_password        | ON    || log_builtin_as_identified_by_password | OFF   || mysql_native_password_proxy_users     | OFF   || old_passwords                         | 0     || report_password                       |       || sha256_password_proxy_users           | OFF   || validate_password_check_user_name     | OFF   || validate_password_dictionary_file     |       || validate_password_length              | 8     || validate_password_mixed_case_count    | 1     || validate_password_number_count        | 1     || validate_password_policy              | LOW   || validate_password_special_char_count  | 1     |+---------------------------------------+-------+14 rows in set (0.35 sec)</code></pre><table><thead><tr><th>Policy</th><th align="center"></th></tr></thead><tbody><tr><td>0 or LOW</td><td align="center">Length</td></tr><tr><td>1 or MEDIUM</td><td align="center">Length;numeric,lowercase/uppercase,and special characters</td></tr><tr><td>2 or STRONG</td><td align="center">Lengt;numeric,lowercase/uppercase,and special characters;dictionary file</td></tr></tbody></table></li></ol><h3 id="Linux防火墙相关"><a href="#Linux防火墙相关" class="headerlink" title="Linux防火墙相关"></a>Linux防火墙相关</h3><blockquote><p>CentOS 7默认使用的是firewall作为防火墙</p></blockquote><ol><li><p>查看防火墙运行状态</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# firewall-cmd --staterunning</code></pre></li><li><p>停止firewall</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# systemctl stop firewalld.service</code></pre></li><li><p>禁止firewall 开机自启</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# systemctl disable firewalld.service Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</code></pre></li></ol><h3 id="Linux安装Redis"><a href="#Linux安装Redis" class="headerlink" title="Linux安装Redis"></a>Linux安装Redis</h3><ol><li><p>下载源码包</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# wget http://download.redis.io/releases/redis-5.0.5.tar.gz</code></pre></li><li><p>解压 </p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# tar -zxvf redis-5.0.5.tar.gz </code></pre></li><li><p>进入源码包编译安装</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# cd redis-5.0.5[root@localhost redis-5.0.5]# make </code></pre></li><li><p>检验</p><pre class=" language-sh"><code class="language-sh">[root@localhost redis-5.0.5]# cd src[root@localhost src]# redis-server 14627:C 05 Sep 2019 13:48:31.173 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo14627:C 05 Sep 2019 13:48:31.173 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=14627, just started</code></pre></li><li><p>更改配置设置后台运行</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# pwd/usr/local/src/redis-5.0.5/src[root@localhost src]# vim ../redis.conf  132 ################################# GENERAL ##################################### 133  134 # By default Redis does not run as a daemon. Use 'yes' if you need it. 135 # Note that Redis will write a pid file in /var/run/redis.pid when daemonized. 136 daemonize no将136行修改为 136 daemonize yes</code></pre></li></ol><h4 id="Redis-daemonize介绍"><a href="#Redis-daemonize介绍" class="headerlink" title="Redis daemonize介绍"></a>Redis daemonize介绍</h4><ol><li>daemonize介绍<ul><li>redis.conf配置文件中daemonize守护线程，默认是NO</li><li>daemonize是用来指定redis是否要用守护线程的方式启动</li></ul></li><li>daemonize设置yes或者no的区别<ul><li><code>daemonize yes</code>:redis采用的是单进程多线程的模式。当redis.conf中选项daemonize设置成yes时，代表开启守护进程模式。在该模式下，redis会在后台运行，并将进程pid号写入至redis.conf选项pidfile设置的文件中，此时redis将一直运行，除非手动kill该进程。</li><li><code>daemonize no</code>:当daemonize选项设置成no时，当前界面将进入redis的命令行界面，exit强制退出或者关闭连接工具(putty,xshell等)都会导致redis进程退出。</li></ul></li></ol><h3 id="Tomcat的安装"><a href="#Tomcat的安装" class="headerlink" title="Tomcat的安装"></a>Tomcat的安装</h3><ol><li><p>下载</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# wget http://us.mirrors.quenda.co/apache/tomcat/tomcat-8/v8.5.45/bin/apache-tomcat-8.5.45.tar.gz</code></pre></li><li><p>解压</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# tar -zxvf apache-tomcat-8.5.45.tar.gz </code></pre></li><li><p>测试</p><pre class=" language-sh"><code class="language-sh">[root@localhost bin]# cd /usr/local/src/apache-tomcat-8.5.45/bin[root@localhost bin]# sh catalina.sh run</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
