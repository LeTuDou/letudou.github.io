<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux开发环境部署</title>
      <link href="/2019/09/07/linux-kai-fa-huan-jing-bu-shu/"/>
      <url>/2019/09/07/linux-kai-fa-huan-jing-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux开发环境部署"><a href="#Linux开发环境部署" class="headerlink" title="Linux开发环境部署"></a>Linux开发环境部署</h2><h3 id="Java环境部署"><a href="#Java环境部署" class="headerlink" title="Java环境部署"></a>Java环境部署</h3><ol><li><p>下载对应tar.gz</p></li><li><p>上传服务器</p></li><li><p>服务器配置</p><pre class=" language-sh"><code class="language-sh">1.解压[root@localhost Java]# tar -zxvf jdk-8u211-linux-x64.tar.gz2.解压完毕需要配置，编辑profile文件：[root@localhost Java]# vim /etc/profile3.进去以后，在最后添加如下内容，配置环境变量：#Java开发者环境JAVA_HOME=/root/Java/jdk1.8.0_211JRE_HOME=$JAVA_HOME/jreCLASS_PATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:PATH=.:$JAVA_HOME/bin:$PATHexport  PATH JAVA_HOME JRE_HOME  CLASS_PATH4.修改保存后让它生效[root@localhost jdk1.8.0_211]# source /etc/profile5.检验java或者javac命令[root@localhost jdk1.8.0_211]# java -versionjava version "1.8.0_211"Java(TM) SE Runtime Environment (build 1.8.0_211-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)</code></pre></li></ol><h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><p>1.安装编译工具及库文件</p><pre class=" language-sh"><code class="language-sh">[root@localhost jdk1.8.0_211]# yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</code></pre><p>2.安装PCRE</p><blockquote><p>PCRE 作用是让 Nginx 支持 Rewrite 功能</p></blockquote><ol><li><p>下载安装包</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# cd /usr/local/src/[root@localhost src]# wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</code></pre></li></ol><ol start="2"><li><p>解压安装包</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# tar -zxvf pcre-8.35.tar.gz</code></pre></li><li><p>进入安装包目录</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# cd pcre-8.35</code></pre></li><li><p>编译安装</p><pre class=" language-sh"><code class="language-sh">[root@localhost pcre-8.35]# ./configure[root@localhost pcre-8.35]# make && make install</code></pre></li><li><p>查看版本</p><pre class=" language-sh"><code class="language-sh">[root@localhost pcre-8.35]# pcre-config --version8.35</code></pre></li></ol><p>3.安装Nginx</p><ol><li><p>下载Nginx</p><pre class=" language-sh"><code class="language-sh">[root@localhost pcre-8.35]# cd /usr/local/src[root@localhost src]# wget http://nginx.org/download/nginx-1.6.2.tar.gz</code></pre></li><li><p>解压安装包</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# tar zxvf nginx-1.6.2.tar.gz </code></pre></li><li><p>进入安装包目录</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# cd nginx-1.6.2</code></pre></li><li><p>编译安装</p><pre class=" language-sh"><code class="language-sh">  [root@localhost nginx-1.6.2]# ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35  nginx path prefix: "/usr/local/webserver/nginx"  nginx binary file: "/usr/local/webserver/nginx/sbin/nginx"  nginx configuration prefix: "/usr/local/webserver/nginx/conf"  nginx configuration file: "/usr/local/webserver/nginx/conf/nginx.conf"  nginx pid file: "/usr/local/webserver/nginx/logs/nginx.pid"  nginx error log file: "/usr/local/webserver/nginx/logs/error.log"  nginx http access log file: "/usr/local/webserver/nginx/logs/access.log"  nginx http client request body temporary files: "client_body_temp"  nginx http proxy temporary files: "proxy_temp"  nginx http fastcgi temporary files: "fastcgi_temp"  nginx http uwsgi temporary files: "uwsgi_temp"  nginx http scgi temporary files: "scgi_temp"</code></pre></li><li><p>测试版本</p><pre class=" language-sh"><code class="language-sh">[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -vnginx version: nginx/1.6.2</code></pre></li><li><p>命令提示</p><pre class=" language-sh"><code class="language-sh">1.检查配置文件nginx.conf的正确性[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -tnginx: the configuration file /usr/local/webserver/nginx/conf/nginx.conf syntax is oknginx: configuration file /usr/local/webserver/nginx/conf/nginx.conf test is successful2.重新载入配置文件[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -s reload 3.重启 Nginx[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -s reopen 4.停止 Nginx[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -s stop</code></pre></li></ol><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><ol><li><p>查看Linux系统版本和内核版本</p><pre class=" language-sh"><code class="language-sh">查看操作系统版本[root@localhost ~]# cat /etc/redhat-releaseCentOS Linux release 7.4.1708 (Core) 查看内核版本[root@localhost ~]#  uname -r 3.10.0-693.el7.x86_64</code></pre></li><li><p>卸载历史版本( 使用命令rpm -e –nodeps {-file-name}进行移除操作，移除的时候可能会有依赖，要注意一定的顺序。)我这里暂无</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# rpm -qa | grep mysql</code></pre></li><li><p>使用rpm命令安装MySQL组件(使用命令rpm -ivh {-file-name}进行安装操作)</p><blockquote><p>按照依赖关系依次安装rpm包 依赖关系依次为common→libs→client→server</p></blockquote><pre><code>[root@localhost ~]# rpm -ivh mysql-community-common-5.7.27-1.el7.x86_64.rpm[root@localhost ~]# rpm -ivh mysql-community-libs-5.7.27-1.el7.x86_64.rpm[root@localhost ~]# rpm -ivh mysql-community-client-5.7.27-1.el7.x86_64.rpm[root@localhost ~]# rpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm  --force --nodeps</code></pre><p>[^注]: <strong>ivh中， i-install安装；v-verbose进度条；h-hash哈希校验</strong>`</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# rpm -ivh mysql-community-libs-5.7.27-1.el7.x86_64.rpm警告：mysql-community-libs-5.7.27-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY错误：依赖检测失败：    mysql-community-common(x86-64) >= 5.7.9 被 mysql-community-libs-5.7.27-1.el7.x86_64 需要    mariadb-libs 被 mysql-community-libs-5.7.27-1.el7.x86_64 取代解决方案:清除yum里所有mariadb依赖包[root@localhost ~]# rpm -qa | grep mariadbmariadb-libs-5.5.56-2.el7.x86_64[root@localhost ~]# rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64[root@localhost ~]# rpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm警告：mysql-community-server-5.7.27-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY错误：依赖检测失败：    net-tools 被 mysql-community-server-5.7.27-1.el7.x86_64 需要原因：这是由于yum安装了旧版本的GPG keys造成的解决方案:[root@localhost ~]# rpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm  --force --nodeps</code></pre></li><li><p>注意细节</p><ol><li>执行 yum remove mysql-libs   命令后，会自动删除掉 /etc/ 下的 my.cnf 文件</li><li>对于安装mysql组件，只有安装了 mysql-community-server-5.7.22-1.el7.x86_64.rpm 组件，才会:<ul><li>在 /etc/下生成 my.cnf 文件 和 my.cnf.d 文件夹</li><li>在/var/lib/下生产以下三个文件夹</li><li>在/var/log/ 下生成 mysqld.log 文件</li><li>在/var/run/ 下生成 mysqld 目录</li></ul></li></ol></li></ol><h3 id="MySQL配置"><a href="#MySQL配置" class="headerlink" title="MySQL配置"></a>MySQL配置</h3><ol><li><p>启动mysql</p><blockquote><p>安装完后，使用命令 <strong>service mysqld start</strong> 或 <strong>systemctl start mysqld.service</strong> 启动MySQL服务。（如果mysql服务无法启动，就重启一下系统）</p></blockquote><pre class=" language-sh"><code class="language-sh">启动mysql[root@localhost ~]# systemctl start mysqld.service 查看mysql状态[root@localhost ~]# systemctl status mysqld.service关闭mysql[root@localhost ~]# systemctl stop mysqld.service</code></pre><p>补充说明</p><pre><code>查看mysql进程[root@localhost ~]# ps -ef|grep mysql查看3306端口[root@localhost ~]# netstat -anop|grep 3306Linux使用netstat或者ifconfig命令时，显示命令未找到。[root@localhost ~]# netstat -anop|grep 3306-bash: netstat: 未找到命令[root@localhost ~]# yum search netstat已加载插件：fastestmirrorLoading mirror speeds from cached hostfile * base: mirror.jdcloud.com * extras: mirror.bit.edu.cn * updates: mirror.jdcloud.com============== 匹配：netstat =================dstat.noarch : Versatile resource statistics toolnet-snmp.x86_64 : A collection of SNMP protocol tools and librariesnet-tools.x86_64 : Basic networking tools[root@localhost ~]# yum install net-tools -y</code></pre></li></ol><p>   2.登录MySQL修改root密码</p><ol><li><p>查看临时密码:</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# grep 'temporary password' /var/log/mysqld.log2019-09-05T03:42:23.844021Z 1 [Note] A temporary password is generated for root@localhost: nUdCNyay/8B#</code></pre><p>nUdCNyay/8B# 就是登陆密码</p></li><li><p>使用临时密码登陆,修改root密码</p><pre class=" language-sh"><code class="language-sh">mysql> ALTER USER root@localhost IDENTIFIED  BY '123123';ERROR 1819 (HY000): Your password does not satisfy the current policy requirements解决方案:1.更改策略，设置 validate_password_policy=0;mysql> set global validate_password_policy=0;Query OK, 0 rows affected (0.00 sec)2.重设密码mysql> set password for root@localhost=password('ab123123');Query OK, 0 rows affected, 1 warning (0.31 sec)3.授予远程访问权限mysql>  grant all privileges on *.* to 'root' @'%' identified by 'ab123123';Query OK, 0 rows affected, 1 warning (0.00 sec)4.刷新权限mysql> flush privileges;Query OK, 0 rows affected (0.00 sec)</code></pre></li><li><p>查看当前数据库密码策略</p><pre class=" language-sh"><code class="language-sh">mysql> show VARIABLES like "%password%";+---------------------------------------+-------+| Variable_name                         | Value |+---------------------------------------+-------+| default_password_lifetime             | 0     || disconnect_on_expired_password        | ON    || log_builtin_as_identified_by_password | OFF   || mysql_native_password_proxy_users     | OFF   || old_passwords                         | 0     || report_password                       |       || sha256_password_proxy_users           | OFF   || validate_password_check_user_name     | OFF   || validate_password_dictionary_file     |       || validate_password_length              | 8     || validate_password_mixed_case_count    | 1     || validate_password_number_count        | 1     || validate_password_policy              | LOW   || validate_password_special_char_count  | 1     |+---------------------------------------+-------+14 rows in set (0.35 sec)</code></pre><table><thead><tr><th>Policy</th><th align="center"></th></tr></thead><tbody><tr><td>0 or LOW</td><td align="center">Length</td></tr><tr><td>1 or MEDIUM</td><td align="center">Length;numeric,lowercase/uppercase,and special characters</td></tr><tr><td>2 or STRONG</td><td align="center">Lengt;numeric,lowercase/uppercase,and special characters;dictionary file</td></tr></tbody></table></li></ol><h3 id="Linux防火墙相关"><a href="#Linux防火墙相关" class="headerlink" title="Linux防火墙相关"></a>Linux防火墙相关</h3><blockquote><p>CentOS 7默认使用的是firewall作为防火墙</p></blockquote><ol><li><p>查看防火墙运行状态</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# firewall-cmd --staterunning</code></pre></li><li><p>停止firewall</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# systemctl stop firewalld.service</code></pre></li><li><p>禁止firewall 开机自启</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# systemctl disable firewalld.service Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</code></pre></li></ol><h3 id="Linux安装Redis"><a href="#Linux安装Redis" class="headerlink" title="Linux安装Redis"></a>Linux安装Redis</h3><ol><li><p>下载源码包</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# wget http://download.redis.io/releases/redis-5.0.5.tar.gz</code></pre></li><li><p>解压 </p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# tar -zxvf redis-5.0.5.tar.gz </code></pre></li><li><p>进入源码包编译安装</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# cd redis-5.0.5[root@localhost redis-5.0.5]# make </code></pre></li><li><p>检验</p><pre class=" language-sh"><code class="language-sh">[root@localhost redis-5.0.5]# cd src[root@localhost src]# redis-server 14627:C 05 Sep 2019 13:48:31.173 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo14627:C 05 Sep 2019 13:48:31.173 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=14627, just started</code></pre></li><li><p>更改配置设置后台运行</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# pwd/usr/local/src/redis-5.0.5/src[root@localhost src]# vim ../redis.conf  132 ################################# GENERAL ##################################### 133  134 # By default Redis does not run as a daemon. Use 'yes' if you need it. 135 # Note that Redis will write a pid file in /var/run/redis.pid when daemonized. 136 daemonize no将136行修改为 136 daemonize yes</code></pre></li></ol><h4 id="Redis-daemonize介绍"><a href="#Redis-daemonize介绍" class="headerlink" title="Redis daemonize介绍"></a>Redis daemonize介绍</h4><ol><li>daemonize介绍<ul><li>redis.conf配置文件中daemonize守护线程，默认是NO</li><li>daemonize是用来指定redis是否要用守护线程的方式启动</li></ul></li><li>daemonize设置yes或者no的区别<ul><li><code>daemonize yes</code>:redis采用的是单进程多线程的模式。当redis.conf中选项daemonize设置成yes时，代表开启守护进程模式。在该模式下，redis会在后台运行，并将进程pid号写入至redis.conf选项pidfile设置的文件中，此时redis将一直运行，除非手动kill该进程。</li><li><code>daemonize no</code>:当daemonize选项设置成no时，当前界面将进入redis的命令行界面，exit强制退出或者关闭连接工具(putty,xshell等)都会导致redis进程退出。</li></ul></li></ol><h3 id="Tomcat的安装"><a href="#Tomcat的安装" class="headerlink" title="Tomcat的安装"></a>Tomcat的安装</h3><ol><li><p>下载</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# wget http://us.mirrors.quenda.co/apache/tomcat/tomcat-8/v8.5.45/bin/apache-tomcat-8.5.45.tar.gz</code></pre></li><li><p>解压</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# tar -zxvf apache-tomcat-8.5.45.tar.gz </code></pre></li><li><p>测试</p><pre class=" language-sh"><code class="language-sh">[root@localhost bin]# cd /usr/local/src/apache-tomcat-8.5.45/bin[root@localhost bin]# sh catalina.sh run</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/07/hello-world/"/>
      <url>/2019/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
