<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web性能测试工具使用</title>
      <link href="/2019/09/07/web-xing-neng-ce-shi-gong-ju-shi-yong/"/>
      <url>/2019/09/07/web-xing-neng-ce-shi-gong-ju-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="apache-bench"><a href="#apache-bench" class="headerlink" title="apache bench"></a>apache bench</h3><blockquote><p>主要是用来测试apache的</p></blockquote><p>使用说明:</p><pre class=" language-sh"><code class="language-sh">ab -c 100 -n 1000 http://www.baidu.com/-c 表示并发用户数-n 表示请求总数</code></pre><p>测试结果:</p><pre class=" language-sh"><code class="language-sh">D:\httpd-2.4.41-o102s-x86-vc14-r2\Apache24\bin>ab -c 100 -n 1000 http://www.baidu.com/This is ApacheBench, Version 2.3 <$Revision: 1843412 $>Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking www.baidu.com (be patient)Completed 100 requestsCompleted 200 requestsCompleted 300 requestsCompleted 400 requestsCompleted 500 requestsCompleted 600 requestsCompleted 700 requestsCompleted 800 requestsCompleted 900 requestsCompleted 1000 requestsFinished 1000 requestsServer Software:        BWS/1.1       #服务器软件版本Server Hostname:        www.baidu.com #请求的URLServer Port:            80              #请求的端口号Document Path:          /              #请求的服务器的路径Document Length:        153928 bytes    #页面长度   单位是字节Concurrency Level:      100                #并发请求量Time taken for tests:   62.017 seconds    #整个测试持续时间Complete requests:      1000            #完成的请求数Failed requests:        999                #失败的请求数   (Connect: 0, Receive: 0, Length: 999, Exceptions: 0)Total transferred:      154804172 bytes    #整个场景中网络传输量HTML transferred:       153843884 bytes #整个场景中的HTML内容传输量Requests per second:    16.12 [#/sec] (mean) #吞吐速率 *Time per request:       6201.745 [ms] (mean)  #用户平均请求等待时间 *Time per request:       62.017 [ms] (mean, across all concurrent requests) #服务器平均请求处理的时间 *Transfer rate:          2437.64 [Kbytes/sec] received  #平均每秒网络上的流量，可以帮助排除是否有存在网络流量过大导致响应时间延长的问题Connection Times (ms)              min  mean[+/-sd] median   maxConnect:        8   62 820.5     15   15012Processing:    60 6023 8850.5   1599   32965Waiting:       12 2411 4824.5    771   16939Total:         72 6084 8893.9   1616   32983Percentage of the requests served within a certain time (ms)  50%   1616    #50%的用户的请求1616ms内返回  66%   1787  75%   2160  80%  16625  90%  17062  95%  31604  98%  32038  99%  32119 100%  32983 (longest request)</code></pre><p>参数详解:</p><pre class=" language-sh"><code class="language-sh">格式：ab [options] [http://]hostname[:port]/path参数说明：-n requests Number of requests to perform//在测试会话中所执行的请求个数（本次测试总共要访问页面的次数）。默认时，仅执行一个请求。-c concurrency Number of multiple requests to make//一次产生的请求个数（并发数）。默认是一次一个。-t timelimit Seconds to max. wait for responses//测试所进行的最大秒数。其内部隐含值是-n 50000。它可以使对服务器的测试限制在一个固定的总时间以内。默认时，没有时间限制。-p postfile File containing data to POST//包含了需要POST的数据的文件，文件格式如“p1=1&p2=2”.使用方法是 -p 111.txt 。 （配合-T）-T content-type Content-type header for POSTing//POST数据所使用的Content-type头信息，如 -T “application/x-www-form-urlencoded” 。 （配合-p）-v verbosity How much troubleshooting info to print//设置显示信息的详细程度 – 4或更大值会显示头信息， 3或更大值可以显示响应代码(404, 200等), 2或更大值可以显示警告和其他信息。 -V 显示版本号并退出。-w Print out results in HTML tables//以HTML表的格式输出结果。默认时，它是白色背景的两列宽度的一张表。-i Use HEAD instead of GET// 执行HEAD请求，而不是GET。-x attributes String to insert as table attributes //用来设置输出结果的表格的table属性-y attributes String to insert as tr attributes //用来设置输出结果的表格的tr属性-z attributes String to insert as td or th attributes //用来设置输出结果的表格的th属性-C attribute Add cookie, eg. -C “c1=1234,c2=2,c3=3″ (repeatable)//-C cookie-name=value 对请求附加一个Cookie:行。 其典型形式是name=value的一个参数对。此参数可以重复，用逗号分割。提示：可以借助session实现原理传递 JSESSIONID参数， 实现保持会话的功能，如-C ” c1=1234,c2=2,c3=3, JSESSIONID=FF056CD16DA9D71CB131C1D56F0319F8″ 。-H attribute Add Arbitrary header line, eg. ‘Accept-Encoding: gzip’ Inserted after all normal header lines. (repeatable)-A attribute Add Basic WWW Authentication, the attributesare a colon separated username and password.-P attribute Add Basic Proxy Authentication, the attributesare a colon separated username and password.//-P proxy-auth-username:password 对一个中转代理提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即, 是否发送了401认证需求代码)，此字符串都会被发送。-X proxy:port Proxyserver and port number to use-V Print version number and exit //打印版本号，然后退出-k Use HTTP KeepAlive feature //使用http keepAlive 特性-d Do not show percentiles served table.-S Do not show confidence estimators and warnings.-g filename Output collected data to gnuplot format file.-e filename Output CSV file with percentages served-h Display usage information (this message)//-attributes 设置属性的字符串. 缺陷程序中有各种静态声明的固定长度的缓冲区。另外，对命令行参数、服务器的响应头和其他外部输入的解析也很简单，这可能会有不良后果。它没有完整地实现 HTTP/1.x; 仅接受某些’预想’的响应格式。 strstr(3)的频繁使用可能会带来性能问题，即你可能是在测试ab而不是服务器的性能。</code></pre><h3 id="http-load"><a href="#http-load" class="headerlink" title="http_load"></a>http_load</h3><blockquote><p>http_load以并行复用的方式运行，用以测试web服务器的吞吐量与负载。<br>但是它不同于大多数压力测试工具，它可以以一个单一的进程运行，一般不会把客户机搞死。<br>还可以测试HTTPS类的网站请求。</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>下载</p><pre class=" language-sh"><code class="language-sh">[root@localhost http_load-09Mar2016]# wget http://www.acme.com/software/http_load/http_load-09Mar2016.tar.gz</code></pre></li><li><p>编译</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# cd http_load-09Mar2016[root@localhost http_load-09Mar2016]# make</code></pre></li><li><p>测试运行</p><pre class=" language-sh"><code class="language-sh">[root@localhost http_load-09Mar2016]# vim urls.txthttp://www.baidu.com/http://192.168.127.131:8080/[root@localhost http_load-09Mar2016]# ./http_load -rate 5 -seconds 10 urls.txt</code></pre></li></ol><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li><p>新建一个urls.txt 用来存储目标url(每一个url独占一行)</p></li><li><p>使用命令</p><pre class=" language-sh"><code class="language-sh">[root@localhost http_load-09Mar2016]# http_load -parallel 5 -seconds 10 urls.txt </code></pre></li><li><p>参数解析</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>-parallel 简写-p</td><td>含义是并发的用户进程数</td></tr><tr><td>-fetches 简写-f</td><td>含义是总计的访问次数</td></tr><tr><td>-rate 简写-r</td><td>含义是每秒的访问频率</td></tr><tr><td>-seconds简写-s</td><td>含义是总计的访问时间</td></tr></tbody></table></li><li><p>举例说明</p><pre class=" language-sh"><code class="language-sh">[root@localhost http_load-09Mar2016]# http_load -r 5 -s 10 urls.txt 49 fetches, 1 max parallel, 7.5419e+06 bytes, in 10.0004 seconds#在上面的测试中运行了49个请求，最大的并发进程数是1，总计传输的数据是7.5419e+06bytes，运行的时间是10.0004秒153916 mean bytes/connection #说明每一连接平均传输的数据量4.89981 fetches/sec, 754162 bytes/sec #每秒的响应请求为4.89981，每秒传递的数据为754162bytes/secmsecs/connect: 25.5803 mean, 57.465 max, 19.389 min#每连接的平均响应时间是25.5803 msecs,最大的响应时间57.465 msecs,最小的响应时间19.389 msecsmsecs/first-response: 27.0916 mean, 46.482 max, 21.079 min#第一次平均响应时间是 27.0916 msecs,最大的响应时间46.482 msecs,最小的响应时间 21.079 msecs47 bad byte countsHTTP response codes:          code 200 -- 49#打开响应页面的类型</code></pre></li></ol><h3 id="webbench"><a href="#webbench" class="headerlink" title="webbench"></a>webbench</h3><blockquote><p>webbench是Linux下的一个网站压力测试工具，最多可以模拟3万个并发连接去测试网站的负载能力</p></blockquote><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>1.下载</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# wget http://soft.vpser.net/test/webbench/webbench-1.5.tar.gz</code></pre><p>2.解压</p><pre class=" language-sh"><code class="language-sh">[root@localhost webbench-1.5]# tar -zxvf webbench-1.5.tar.gz </code></pre><p>3.安装ctags，编译</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# yum install ctags -y[root@localhost src]# cd webbench-1.5[root@localhost webbench-1.5]# make</code></pre><p>4.测试</p><pre class=" language-sh"><code class="language-sh">[root@localhost webbench-1.5]# webbench -c 1 -t 5 http://192.168.127.131:8080/</code></pre><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><pre class=" language-sh"><code class="language-sh">用法：webbench -c 并发数 -t 运行测试时间 URL[root@localhost webbench-1.5]# webbench -c 1 -t 5 http://192.168.127.131:8080/Webbench - Simple Web Benchmark 1.5Copyright (c) Radim Kolar 1997-2004, GPL Open Source Software.Benchmarking: GET http://192.168.127.131:8080/1 client, running 5 sec.Speed=322032 pages/min, 60625932 bytes/sec.Requests: 26836 susceed, 0 failed.</code></pre><h3 id="Siege"><a href="#Siege" class="headerlink" title="Siege"></a>Siege</h3><ul><li><p>安装</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# wget http://download.joedog.org/siege/siege-latest.tar.gz[root@localhost src]# tar -zxvf siege-latest.tar.gz [root@localhost src]# cd siege-4.0.4/[root@localhost siege-4.0.4]# ./configure [root@localhost siege-4.0.4]# make[root@localhost siege-4.0.4]# make install[root@localhost siege-4.0.4]# vim url.txthttp://www.baidu.com/[root@localhost siege-4.0.4]# siege -c 1 -r 1 -f url.txt</code></pre></li><li><p>使用</p><pre class=" language-sh"><code class="language-sh">[root@localhost siege-4.0.4]# siege -c 1 -r 1 -f url.txt** SIEGE 4.0.4** Preparing 1 concurrent users for battle.The server is now under siege...HTTP/1.1 200     0.10 secs:   39179 bytes ==> GET  /HTTP/1.1 200     0.07 secs:    1131 bytes ==> GET  /baidu.html?from=noscriptHTTP/1.1 200     0.06 secs:      91 bytes ==> GET  /img/gs.gifHTTP/1.1 200     0.12 secs:    3757 bytes ==> GET  /5eN1bjq8AAUYm2zgoY3K/r/www/cache/bdorz/baidu.min.cssHTTP/1.1 200     0.53 secs:   33167 bytes ==> GET  /r/www/cache/static/jquery/jquery-1.10.2.min_65682a2.jsHTTP/1.1 200     0.07 secs:    6511 bytes ==> GET  /img/baidu_resultlogo@2.pngHTTP/1.1 200     0.07 secs:     705 bytes ==> GET  /img/baidu_jgylogo3.gifHTTP/1.1 200     0.06 secs:    7877 bytes ==> GET  /img/bd_logo1.pngTransactions:                   8 hits 完成8次处理Availability:              100.00 %    100.00 % 成功率Elapsed time:                1.08 secs 总共用时Data transferred:            0.09 MB   共数据传输0.09 MBResponse time:                0.13 secs 显示网络连接的速度Transaction rate:            7.41 trans/sec 平均每秒完成 17.56 次处理Throughput:                0.08 MB/sec  平均每秒传送数据Concurrency:                1.00     实际最高并发数Successful transactions:           8 成功处理次数Failed transactions:               0 失败处理次数Longest transaction:            0.53 每次传输所花最长时间Shortest transaction:            0.06 每次传输所花最短时间</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> WebTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux开发环境部署</title>
      <link href="/2019/09/07/linux-kai-fa-huan-jing-bu-shu/"/>
      <url>/2019/09/07/linux-kai-fa-huan-jing-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux开发环境部署"><a href="#Linux开发环境部署" class="headerlink" title="Linux开发环境部署"></a>Linux开发环境部署</h2><h3 id="Java环境部署"><a href="#Java环境部署" class="headerlink" title="Java环境部署"></a>Java环境部署</h3><ol><li><p>下载对应tar.gz</p></li><li><p>上传服务器</p></li><li><p>服务器配置</p><pre class=" language-sh"><code class="language-sh">1.解压[root@localhost Java]# tar -zxvf jdk-8u211-linux-x64.tar.gz2.解压完毕需要配置，编辑profile文件：[root@localhost Java]# vim /etc/profile3.进去以后，在最后添加如下内容，配置环境变量：#Java开发者环境JAVA_HOME=/root/Java/jdk1.8.0_211JRE_HOME=$JAVA_HOME/jreCLASS_PATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:PATH=.:$JAVA_HOME/bin:$PATHexport  PATH JAVA_HOME JRE_HOME  CLASS_PATH4.修改保存后让它生效[root@localhost jdk1.8.0_211]# source /etc/profile5.检验java或者javac命令[root@localhost jdk1.8.0_211]# java -versionjava version "1.8.0_211"Java(TM) SE Runtime Environment (build 1.8.0_211-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)</code></pre></li></ol><h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><p>1.安装编译工具及库文件</p><pre class=" language-sh"><code class="language-sh">[root@localhost jdk1.8.0_211]# yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</code></pre><p>2.安装PCRE</p><blockquote><p>PCRE 作用是让 Nginx 支持 Rewrite 功能</p></blockquote><ol><li><p>下载安装包</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# cd /usr/local/src/[root@localhost src]# wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</code></pre></li></ol><ol start="2"><li><p>解压安装包</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# tar -zxvf pcre-8.35.tar.gz</code></pre></li><li><p>进入安装包目录</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# cd pcre-8.35</code></pre></li><li><p>编译安装</p><pre class=" language-sh"><code class="language-sh">[root@localhost pcre-8.35]# ./configure[root@localhost pcre-8.35]# make && make install</code></pre></li><li><p>查看版本</p><pre class=" language-sh"><code class="language-sh">[root@localhost pcre-8.35]# pcre-config --version8.35</code></pre></li></ol><p>3.安装Nginx</p><ol><li><p>下载Nginx</p><pre class=" language-sh"><code class="language-sh">[root@localhost pcre-8.35]# cd /usr/local/src[root@localhost src]# wget http://nginx.org/download/nginx-1.6.2.tar.gz</code></pre></li><li><p>解压安装包</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# tar zxvf nginx-1.6.2.tar.gz </code></pre></li><li><p>进入安装包目录</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# cd nginx-1.6.2</code></pre></li><li><p>编译安装</p><pre class=" language-sh"><code class="language-sh">  [root@localhost nginx-1.6.2]# ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35  nginx path prefix: "/usr/local/webserver/nginx"  nginx binary file: "/usr/local/webserver/nginx/sbin/nginx"  nginx configuration prefix: "/usr/local/webserver/nginx/conf"  nginx configuration file: "/usr/local/webserver/nginx/conf/nginx.conf"  nginx pid file: "/usr/local/webserver/nginx/logs/nginx.pid"  nginx error log file: "/usr/local/webserver/nginx/logs/error.log"  nginx http access log file: "/usr/local/webserver/nginx/logs/access.log"  nginx http client request body temporary files: "client_body_temp"  nginx http proxy temporary files: "proxy_temp"  nginx http fastcgi temporary files: "fastcgi_temp"  nginx http uwsgi temporary files: "uwsgi_temp"  nginx http scgi temporary files: "scgi_temp"</code></pre></li><li><p>测试版本</p><pre class=" language-sh"><code class="language-sh">[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -vnginx version: nginx/1.6.2</code></pre></li><li><p>命令提示</p><pre class=" language-sh"><code class="language-sh">1.检查配置文件nginx.conf的正确性[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -tnginx: the configuration file /usr/local/webserver/nginx/conf/nginx.conf syntax is oknginx: configuration file /usr/local/webserver/nginx/conf/nginx.conf test is successful2.重新载入配置文件[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -s reload 3.重启 Nginx[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -s reopen 4.停止 Nginx[root@localhost nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -s stop</code></pre></li></ol><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><ol><li><p>查看Linux系统版本和内核版本</p><pre class=" language-sh"><code class="language-sh">查看操作系统版本[root@localhost ~]# cat /etc/redhat-releaseCentOS Linux release 7.4.1708 (Core) 查看内核版本[root@localhost ~]#  uname -r 3.10.0-693.el7.x86_64</code></pre></li><li><p>卸载历史版本( 使用命令rpm -e –nodeps {-file-name}进行移除操作，移除的时候可能会有依赖，要注意一定的顺序。)我这里暂无</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# rpm -qa | grep mysql</code></pre></li><li><p>使用rpm命令安装MySQL组件(使用命令rpm -ivh {-file-name}进行安装操作)</p><blockquote><p>按照依赖关系依次安装rpm包 依赖关系依次为common→libs→client→server</p></blockquote><pre><code>[root@localhost ~]# rpm -ivh mysql-community-common-5.7.27-1.el7.x86_64.rpm[root@localhost ~]# rpm -ivh mysql-community-libs-5.7.27-1.el7.x86_64.rpm[root@localhost ~]# rpm -ivh mysql-community-client-5.7.27-1.el7.x86_64.rpm[root@localhost ~]# rpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm  --force --nodeps</code></pre><p>[^注]: <strong>ivh中， i-install安装；v-verbose进度条；h-hash哈希校验</strong>`</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# rpm -ivh mysql-community-libs-5.7.27-1.el7.x86_64.rpm警告：mysql-community-libs-5.7.27-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY错误：依赖检测失败：    mysql-community-common(x86-64) >= 5.7.9 被 mysql-community-libs-5.7.27-1.el7.x86_64 需要    mariadb-libs 被 mysql-community-libs-5.7.27-1.el7.x86_64 取代解决方案:清除yum里所有mariadb依赖包[root@localhost ~]# rpm -qa | grep mariadbmariadb-libs-5.5.56-2.el7.x86_64[root@localhost ~]# rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64[root@localhost ~]# rpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm警告：mysql-community-server-5.7.27-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY错误：依赖检测失败：    net-tools 被 mysql-community-server-5.7.27-1.el7.x86_64 需要原因：这是由于yum安装了旧版本的GPG keys造成的解决方案:[root@localhost ~]# rpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm  --force --nodeps</code></pre></li><li><p>注意细节</p><ol><li>执行 yum remove mysql-libs   命令后，会自动删除掉 /etc/ 下的 my.cnf 文件</li><li>对于安装mysql组件，只有安装了 mysql-community-server-5.7.22-1.el7.x86_64.rpm 组件，才会:<ul><li>在 /etc/下生成 my.cnf 文件 和 my.cnf.d 文件夹</li><li>在/var/lib/下生产以下三个文件夹</li><li>在/var/log/ 下生成 mysqld.log 文件</li><li>在/var/run/ 下生成 mysqld 目录</li></ul></li></ol></li></ol><h3 id="MySQL配置"><a href="#MySQL配置" class="headerlink" title="MySQL配置"></a>MySQL配置</h3><ol><li><p>启动mysql</p><blockquote><p>安装完后，使用命令 <strong>service mysqld start</strong> 或 <strong>systemctl start mysqld.service</strong> 启动MySQL服务。（如果mysql服务无法启动，就重启一下系统）</p></blockquote><pre class=" language-sh"><code class="language-sh">启动mysql[root@localhost ~]# systemctl start mysqld.service 查看mysql状态[root@localhost ~]# systemctl status mysqld.service关闭mysql[root@localhost ~]# systemctl stop mysqld.service</code></pre><p>补充说明</p><pre><code>查看mysql进程[root@localhost ~]# ps -ef|grep mysql查看3306端口[root@localhost ~]# netstat -anop|grep 3306Linux使用netstat或者ifconfig命令时，显示命令未找到。[root@localhost ~]# netstat -anop|grep 3306-bash: netstat: 未找到命令[root@localhost ~]# yum search netstat已加载插件：fastestmirrorLoading mirror speeds from cached hostfile * base: mirror.jdcloud.com * extras: mirror.bit.edu.cn * updates: mirror.jdcloud.com============== 匹配：netstat =================dstat.noarch : Versatile resource statistics toolnet-snmp.x86_64 : A collection of SNMP protocol tools and librariesnet-tools.x86_64 : Basic networking tools[root@localhost ~]# yum install net-tools -y</code></pre></li></ol><p>   2.登录MySQL修改root密码</p><ol><li><p>查看临时密码:</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# grep 'temporary password' /var/log/mysqld.log2019-09-05T03:42:23.844021Z 1 [Note] A temporary password is generated for root@localhost: nUdCNyay/8B#</code></pre><p>nUdCNyay/8B# 就是登陆密码</p></li><li><p>使用临时密码登陆,修改root密码</p><pre class=" language-sh"><code class="language-sh">mysql> ALTER USER root@localhost IDENTIFIED  BY '123123';ERROR 1819 (HY000): Your password does not satisfy the current policy requirements解决方案:1.更改策略，设置 validate_password_policy=0;mysql> set global validate_password_policy=0;Query OK, 0 rows affected (0.00 sec)2.重设密码mysql> set password for root@localhost=password('ab123123');Query OK, 0 rows affected, 1 warning (0.31 sec)3.授予远程访问权限mysql>  grant all privileges on *.* to 'root' @'%' identified by 'ab123123';Query OK, 0 rows affected, 1 warning (0.00 sec)4.刷新权限mysql> flush privileges;Query OK, 0 rows affected (0.00 sec)</code></pre></li><li><p>查看当前数据库密码策略</p><pre class=" language-sh"><code class="language-sh">mysql> show VARIABLES like "%password%";+---------------------------------------+-------+| Variable_name                         | Value |+---------------------------------------+-------+| default_password_lifetime             | 0     || disconnect_on_expired_password        | ON    || log_builtin_as_identified_by_password | OFF   || mysql_native_password_proxy_users     | OFF   || old_passwords                         | 0     || report_password                       |       || sha256_password_proxy_users           | OFF   || validate_password_check_user_name     | OFF   || validate_password_dictionary_file     |       || validate_password_length              | 8     || validate_password_mixed_case_count    | 1     || validate_password_number_count        | 1     || validate_password_policy              | LOW   || validate_password_special_char_count  | 1     |+---------------------------------------+-------+14 rows in set (0.35 sec)</code></pre><table><thead><tr><th>Policy</th><th align="center"></th></tr></thead><tbody><tr><td>0 or LOW</td><td align="center">Length</td></tr><tr><td>1 or MEDIUM</td><td align="center">Length;numeric,lowercase/uppercase,and special characters</td></tr><tr><td>2 or STRONG</td><td align="center">Lengt;numeric,lowercase/uppercase,and special characters;dictionary file</td></tr></tbody></table></li></ol><h3 id="Linux防火墙相关"><a href="#Linux防火墙相关" class="headerlink" title="Linux防火墙相关"></a>Linux防火墙相关</h3><blockquote><p>CentOS 7默认使用的是firewall作为防火墙</p></blockquote><ol><li><p>查看防火墙运行状态</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# firewall-cmd --staterunning</code></pre></li><li><p>停止firewall</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# systemctl stop firewalld.service</code></pre></li><li><p>禁止firewall 开机自启</p><pre class=" language-sh"><code class="language-sh">[root@localhost ~]# systemctl disable firewalld.service Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</code></pre></li></ol><h3 id="Linux安装Redis"><a href="#Linux安装Redis" class="headerlink" title="Linux安装Redis"></a>Linux安装Redis</h3><ol><li><p>下载源码包</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# wget http://download.redis.io/releases/redis-5.0.5.tar.gz</code></pre></li><li><p>解压 </p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# tar -zxvf redis-5.0.5.tar.gz </code></pre></li><li><p>进入源码包编译安装</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# cd redis-5.0.5[root@localhost redis-5.0.5]# make </code></pre></li><li><p>检验</p><pre class=" language-sh"><code class="language-sh">[root@localhost redis-5.0.5]# cd src[root@localhost src]# redis-server 14627:C 05 Sep 2019 13:48:31.173 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo14627:C 05 Sep 2019 13:48:31.173 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=14627, just started</code></pre></li><li><p>更改配置设置后台运行</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# pwd/usr/local/src/redis-5.0.5/src[root@localhost src]# vim ../redis.conf  132 ################################# GENERAL ##################################### 133  134 # By default Redis does not run as a daemon. Use 'yes' if you need it. 135 # Note that Redis will write a pid file in /var/run/redis.pid when daemonized. 136 daemonize no将136行修改为 136 daemonize yes</code></pre></li></ol><h4 id="Redis-daemonize介绍"><a href="#Redis-daemonize介绍" class="headerlink" title="Redis daemonize介绍"></a>Redis daemonize介绍</h4><ol><li>daemonize介绍<ul><li>redis.conf配置文件中daemonize守护线程，默认是NO</li><li>daemonize是用来指定redis是否要用守护线程的方式启动</li></ul></li><li>daemonize设置yes或者no的区别<ul><li><code>daemonize yes</code>:redis采用的是单进程多线程的模式。当redis.conf中选项daemonize设置成yes时，代表开启守护进程模式。在该模式下，redis会在后台运行，并将进程pid号写入至redis.conf选项pidfile设置的文件中，此时redis将一直运行，除非手动kill该进程。</li><li><code>daemonize no</code>:当daemonize选项设置成no时，当前界面将进入redis的命令行界面，exit强制退出或者关闭连接工具(putty,xshell等)都会导致redis进程退出。</li></ul></li></ol><h3 id="Tomcat的安装"><a href="#Tomcat的安装" class="headerlink" title="Tomcat的安装"></a>Tomcat的安装</h3><ol><li><p>下载</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# wget http://us.mirrors.quenda.co/apache/tomcat/tomcat-8/v8.5.45/bin/apache-tomcat-8.5.45.tar.gz</code></pre></li><li><p>解压</p><pre class=" language-sh"><code class="language-sh">[root@localhost src]# tar -zxvf apache-tomcat-8.5.45.tar.gz </code></pre></li><li><p>测试</p><pre class=" language-sh"><code class="language-sh">[root@localhost bin]# cd /usr/local/src/apache-tomcat-8.5.45/bin[root@localhost bin]# sh catalina.sh run</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
